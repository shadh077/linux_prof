---
- name: install packages
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
  vars:
      packages:
      - mysql-server-8.0
      - python3-mysqldb
  #when: ansible_os_family == 'Debian'
- name: Copy the my.cnf file
  template:
    src: "my.cnf.{{ ansible_os_family }}.j2"
    dest: "{{ mysql_conf_dir }}/my.cnf"
  notify:
   - restart mysql
- name: Create the directory /etc/mysql/conf.d
  file:
    path: /etc/mysql/conf.d
    state: directory
  notify:
   - restart mysql
- name: Deploy mysql config to conf.d
  template:
    src: mysql.cnf.j2
    dest: /etc/mysql/conf.d/mysql.cnf
  notify:
    - restart mysql
- name: Start the mysql services
  ansible.builtin.service:
    name: "{{ mysql_service }}"
    state: started
    enabled: true
- name: Update mysql root password for all root accounts
  mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_db_pass }}"
    check_implicit_admin: true
  with_items:
   - "{{ ansible_hostname }}"
   - localhost
   #- 127.0.0.1
  when: ansible_hostname != 'localhost'
- name: Update mysql root password for all root accounts
  mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_db_pass }}"
    check_implicit_admin: true
  with_items:
   - localhost
   #- 127.0.0.1
  when: ansible_hostname == 'localhost'
- name: Copy .my.cnf file with root password credentials
  template:
    src: .my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600
- name: Ensure anonymous users are not in the database
  mysql_user:
    name: ''
    host: "{{ item }}"
    state: absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"
- name: Remove the test database
  mysql_db:
    name: test
    state: absent
- name: Create the replication users
  mysql_user:
    name: "{{ item.name }}"
    host: "%"
    password: "{{ item.pass|default('verystrong') }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present
  with_items:
    - "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'master'
- name: Check if slave is already configured for replication
  mysql_replication:
    mode: getreplica
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'
- debug: var=ansible_default_ipv4 verbosity=0
#- name: Ensure the hostname entry for master is available for the client.
#  lineinfile:
#    dest: /etc/hosts
#    regexp: "{{ mysql_repl_master }}"
#    line: "{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + ' ' + mysql_repl_master }}"
#    state: present
#  when: slave is search("Server is not configured as mysql replica") and mysql_repl_role == 'slave' and mysql_repl_master is defined
- name: Get the current master servers replication status
  mysql_replication:
    mode: getprimary
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave is search("Server is not configured as mysql replica") and mysql_repl_role == 'slave' and mysql_repl_master is defined
- name: Change the master in slave to start the replication
  mysql_replication:
    mode: changeprimary
    master_host: "{{ mysql_repl_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mysql_repl_user[0].name }}"
    master_password: "{{ mysql_repl_user[0].pass }}"
  when: slave is search("Server is not configured as mysql replica") and mysql_repl_role == 'slave' and mysql_repl_master is defined
- name: Create the database's
  mysql_db:
    name: "{{ item.name }}"
    #collation: "{{ item.collation }}"
    #encoding: "{{ item.encoding }}"
    state: present
  with_items:
    - "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'
- name: Create the database users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass|default('verystrong') }}"
    priv: "{{ item.priv|default('*.*:ALL') }}"
    state: present
    host: "{{ item.host | default('localhost') }}"
  with_items:
    - "{{ mysql_users }}"
  when: mysql_users|lower() != 'none'
- block:
  - name: Ensure new engines started
    ansible.builtin.service:
      name: "{{ item.service }}"
      state: started
      enabled: true
    with_items:
      - "{{ mysql_engines }}"
